import unittest
import os
import json
from backend_app.malware_analysis.analyze import analyze_file
from backend_app.routes.file_upload_routes import check_docker_environment

class TestMalwareAnalysis(unittest.TestCase):
    def setUp(self):
        """Set up test environment"""
        self.test_files_dir = os.path.join(os.path.dirname(__file__), 'test_files')
        if not os.path.exists(self.test_files_dir):
            os.makedirs(self.test_files_dir)
        
        # Create test files
        self.clean_file = os.path.join(self.test_files_dir, 'clean.exe')
        self.malicious_file = os.path.join(self.test_files_dir, 'malicious.exe')
        
        # Create dummy test files
        with open(self.clean_file, 'wb') as f:
            f.write(b'This is a clean file')
        with open(self.malicious_file, 'wb') as f:
            f.write(b'This is a malicious file')

    def tearDown(self):
        """Clean up test files"""
        if os.path.exists(self.test_files_dir):
            for file in os.listdir(self.test_files_dir):
                os.remove(os.path.join(self.test_files_dir, file))
            os.rmdir(self.test_files_dir)

    def test_docker_environment(self):
        """Test Docker environment check"""
        docker_ready, message = check_docker_environment()
        self.assertTrue(docker_ready, f"Docker environment not ready: {message}")

    def test_clean_file_analysis(self):
        """Test analysis of a clean file"""
        result = analyze_file(self.clean_file)
        self.assertIsInstance(result, dict)
        self.assertIn('is_malicious', result)
        self.assertFalse(result['is_malicious'])

    def test_malicious_file_analysis(self):
        """Test analysis of a malicious file"""
        result = analyze_file(self.malicious_file)
        self.assertIsInstance(result, dict)
        self.assertIn('is_malicious', result)
        self.assertTrue(result['is_malicious'])

    def test_file_not_found(self):
        """Test handling of non-existent file"""
        with self.assertRaises(FileNotFoundError):
            analyze_file('nonexistent.exe')

    def test_invalid_file_type(self):
        """Test handling of invalid file type"""
        invalid_file = os.path.join(self.test_files_dir, 'invalid.txt')
        with open(invalid_file, 'w') as f:
            f.write('This is not an executable')
        
        result = analyze_file(invalid_file)
        self.assertIsInstance(result, dict)
        self.assertIn('error', result)

if __name__ == '__main__':
    unittest.main() 